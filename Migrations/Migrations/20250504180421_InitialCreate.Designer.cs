// <auto-generated />
using System;
using EntityFrameworkTest.domain.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250504180421_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Entities.ConcreteShoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShoesId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShoesId");

                    b.ToTable("ConcreteShoes");
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Entities.IncomingInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ConcreteShoesId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteShoesId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("IncomingInvoices");
                });

            modelBuilder.Entity("Entities.OutgoingInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ConcreteShoesId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteShoesId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("OutgoingInvoices");
                });

            modelBuilder.Entity("Entities.Placement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("Cell")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ConcreteShoesId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Row")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Section")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteShoesId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Placements");
                });

            modelBuilder.Entity("Entities.Shoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("Entities.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ConcreteShoesId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FromWareHouseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToWareHouseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteShoesId");

                    b.HasIndex("FromWareHouseId");

                    b.HasIndex("ToWareHouseId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Entities.WareHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("CellCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RowCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TierCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("Entities.WriteOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ConcreteShoesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteShoesId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("WriteOffs");
                });

            modelBuilder.Entity("Entities.ConcreteShoes", b =>
                {
                    b.HasOne("Entities.Shoes", "Shoes")
                        .WithMany("ConcreteShoesList")
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.HasOne("Entities.WareHouse", null)
                        .WithMany("Employees")
                        .HasForeignKey("WareHouseId");
                });

            modelBuilder.Entity("Entities.IncomingInvoice", b =>
                {
                    b.HasOne("Entities.ConcreteShoes", "ConcreteShoes")
                        .WithMany("IncomingInvoices")
                        .HasForeignKey("ConcreteShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("IncomingInvoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.WareHouse", "WareHouse")
                        .WithMany("IncomingInvoices")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcreteShoes");

                    b.Navigation("Employee");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Entities.OutgoingInvoice", b =>
                {
                    b.HasOne("Entities.ConcreteShoes", "ConcreteShoes")
                        .WithMany("OutgoingInvoices")
                        .HasForeignKey("ConcreteShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("OutgoingInvoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.WareHouse", "WareHouse")
                        .WithMany("OutgoingInvoices")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcreteShoes");

                    b.Navigation("Employee");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Entities.Placement", b =>
                {
                    b.HasOne("Entities.ConcreteShoes", "ConcreteShoes")
                        .WithMany("Placement")
                        .HasForeignKey("ConcreteShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.WareHouse", "WareHouse")
                        .WithMany("Placements")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcreteShoes");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Entities.Transfer", b =>
                {
                    b.HasOne("Entities.ConcreteShoes", "ConcreteShoes")
                        .WithMany("Transfers")
                        .HasForeignKey("ConcreteShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.WareHouse", "FromWareHouse")
                        .WithMany("FromTransfers")
                        .HasForeignKey("FromWareHouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.WareHouse", "ToWareHouse")
                        .WithMany("ToTransfers")
                        .HasForeignKey("ToWareHouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConcreteShoes");

                    b.Navigation("FromWareHouse");

                    b.Navigation("ToWareHouse");
                });

            modelBuilder.Entity("Entities.WriteOff", b =>
                {
                    b.HasOne("Entities.ConcreteShoes", "ConcreteShoes")
                        .WithMany()
                        .HasForeignKey("ConcreteShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("WriteOffs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.WareHouse", "WareHouse")
                        .WithMany("WriteOffs")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcreteShoes");

                    b.Navigation("Employee");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Entities.ConcreteShoes", b =>
                {
                    b.Navigation("IncomingInvoices");

                    b.Navigation("OutgoingInvoices");

                    b.Navigation("Placement");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.Navigation("IncomingInvoices");

                    b.Navigation("OutgoingInvoices");

                    b.Navigation("WriteOffs");
                });

            modelBuilder.Entity("Entities.Shoes", b =>
                {
                    b.Navigation("ConcreteShoesList");
                });

            modelBuilder.Entity("Entities.WareHouse", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("FromTransfers");

                    b.Navigation("IncomingInvoices");

                    b.Navigation("OutgoingInvoices");

                    b.Navigation("Placements");

                    b.Navigation("ToTransfers");

                    b.Navigation("WriteOffs");
                });
#pragma warning restore 612, 618
        }
    }
}
